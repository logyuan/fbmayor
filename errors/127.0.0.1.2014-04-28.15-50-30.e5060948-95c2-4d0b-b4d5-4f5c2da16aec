(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Table' object has no attribute 'date_time'"
p3
sS'layer'
p4
S'/Applications/web2py.app/Contents/Resources/applications/fbmayor/controllers/graphAPI.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nimport ExtendedOpenGraph\nfrom facebook import GraphAPI, GraphAPIError\nimport json\nfrom collections import OrderedDict\nimport datetime\nfrom dateutil import parser\n\ndef teamCount():\n    errorMsg="success made the teamCount"\n    candidates = ["\xe9\x80\xa3\xe5\x8b\x9d\xe6\x96\x87","\xe6\x9f\xaf\xe6\x96\x87\xe5\x93\xb2","\xe9\xa1\xa7\xe7\xab\x8b\xe9\x9b\x84"]\n    results=OrderedDict()\n    try:\n        for candidate in candidates:\n            \n            total_active_posts = 0\n            total_post_likes = 0\n            total_post_comments = 0\n            total_post_shares = 0\n            rows = fbpl( ((fbpl.post.team == candidate) & ( fbpl.post.tscore > 0))  ).select()\n            for row in rows:\n                total_post_likes += row.likes_count\n                total_post_comments += row.comment_count\n                total_post_shares += row.shares_count\n            \n            total_active_posts = len(rows)\n#---------------------------------------------------------------------------------------------#\n            hour48_active_posts =0\n            hour48_post_likes = 0\n            hour48_post_comments = 0\n            hour48_post_shares = 0\n\n            rows = fbpl( ((fbpl.post.team == candidate) & ( fbpl.post.fscore > 0))  ).select() \n            \n            for row in rows:\n                hour48_post_likes += row.likes_sincelastupdate\n                hour48_post_comments += row.comment_sincelastupdate\n                hour48_post_shares += row.shares_sincelastupdate\n            \n            hour48_active_posts = len(rows)\n\n#---------------------------------------------------------------------------------------------#\n            hour48_active_stories =0\n            hour48_story_likes = 0\n            hour48_story_comments = 0\n            hour48_story_shares = 0\n\n            rows = fbpl( ((fbpl.post.team == candidate) & ( fbpl.post.fscore > 0)) & ((fbpl.post.ptype == \'photo\') | ( fbpl.post.ptype == \'status\'))  ).select() \n            for row in rows:\n                hour48_story_likes += row.likes_sincelastupdate\n                hour48_story_comments += row.comment_sincelastupdate\n                hour48_story_shares += row.shares_sincelastupdate\n            \n            hour48_active_stories = len(rows)            \n            \n            \n#---------------------------------------------------------------------------------------------#\n            hour48_active_links =0\n            hour48_link_likes = 0\n            hour48_link_comments = 0\n            hour48_link_shares = 0\n\n            rows = fbpl( ((fbpl.post.team == candidate) & ( fbpl.post.fscore > 0) &( fbpl.post.ptype == \'link\') )  ).select() #| ((fbpl.post.team == candidate) & (fbpl.post.created_time >= week ))\n            for row in rows:\n                hour48_link_likes += row.likes_sincelastupdate\n                hour48_link_comments += row.comment_sincelastupdate\n                hour48_link_shares += row.shares_sincelastupdate\n            \n            hour48_active_links = len(rows)            \n            \n#---------------------------------------------------------------------------------------------#\n            hour48_active_videos =0\n            hour48_video_likes = 0\n            hour48_video_comments = 0\n            hour48_video_shares = 0\n\n            rows = fbpl( ((fbpl.post.team == candidate) & ( fbpl.post.fscore > 0) &( fbpl.post.ptype == \'video\') )  ).select() #| ((fbpl.post.team == candidate) & (fbpl.post.created_time >= week ))\n            for row in rows:\n                hour48_video_likes += row.likes_sincelastupdate\n                hour48_video_comments += row.comment_sincelastupdate\n                hour48_video_shares += row.shares_sincelastupdate\n            \n            hour48_active_videos = len(rows)            \n            \n            date_time = datetime.datetime.now().strftime(\'%Y%m%d\')\n            date_time = datetime.datetime.strptime(date_time,\'%Y%m%d\')\n            \n            checkins=0\n            likes=0\t\n            were_here_count=0\t\n            talking_about_count=0\n            Pages = fbpl(fbpl.page.team == candidate).select()\n            for page in Pages:\n                checkins += page.checkins\n                likes += page.likes\n                were_here_count += page.were_here_count\n                talking_about_count += page.talking_about_count\n            \n            # check it team_counts has data in the same date, if YES, update the record, if NOT, then insert the new records.\n            \n            row = fbpl( ((fbpl.team_counts.team == candidate)  & ( fbpl.post.date_time == date_time ) )  ).select() \n            if row:\n                row.update_record(checkins=checkins, likes=likes, were_here_count=were_here_count, talking_about_count=talking_about_count, total_active_posts=total_active_posts, total_post_likes=total_post_likes, total_post_comments=total_post_comments ,total_post_shares=total_post_shares, hour48_post_likes=hour48_post_likes, hour48_post_comments=hour48_post_comments, hour48_post_shares=hour48_post_shares, hour48_active_posts = hour48_active_posts, hour48_active_links =hour48_active_links, hour48_link_likes = hour48_link_likes, hour48_link_comments = hour48_link_comments, hour48_link_shares = hour48_link_shares, hour48_active_videos = hour48_active_videos, hour48_video_likes = hour48_video_likes, hour48_video_comments = hour48_video_comments, hour48_video_shares = hour48_video_shares, hour48_active_stories = hour48_active_stories, hour48_story_likes = hour48_story_likes, hour48_story_comments = hour48_story_comments, hour48_story_shares = hour48_story_shares)\n            else:    \n                fbpl.team_counts.insert( team= candidate, date_time = date_time, checkins=checkins, likes=likes, were_here_count=were_here_count, talking_about_count=talking_about_count, total_active_posts=total_active_posts, total_post_likes=total_post_likes, total_post_comments=total_post_comments ,total_post_shares=total_post_shares, hour48_post_likes=hour48_post_likes, hour48_post_comments=hour48_post_comments, hour48_post_shares=hour48_post_shares, hour48_active_posts = hour48_active_posts, hour48_active_links =hour48_active_links, hour48_link_likes = hour48_link_likes, hour48_link_comments = hour48_link_comments, hour48_link_shares = hour48_link_shares, hour48_active_videos = hour48_active_videos, hour48_video_likes = hour48_video_likes, hour48_video_comments = hour48_video_comments, hour48_video_shares = hour48_video_shares, hour48_active_stories = hour48_active_stories, hour48_story_likes = hour48_story_likes, hour48_story_comments = hour48_story_comments, hour48_story_shares = hour48_story_shares)\n            fbpl.commit()\n    except:\n        raise\n        #errorMsg=  "Unexpected error:", sys.exc_info()[0]\n    return errorMsg\n\n\n\n\n\ndef test2():\n    now= datetime.datetime.utcnow()\n    #month2 = (now - datetime.timedelta(hours=24*28*2)).strftime(\'%Y-%m-%dT%H:%M:%S\') #2014-04-24T17:57:21+0000\n    #hour48 = (now - datetime.timedelta(hours=72)).strftime(\'%Y-%m-%d %H:%M:%S\')\n    #hour48 = datetime.datetime.strptime(hour48,\'%Y-%m-%d %H:%M:%S\')\n    #now= datetime.datetime.utcnow()\n    #week2 = (now - datetime.timedelta(hours=24*14)).strftime(\'%Y-%m-%dT%H:%M:%S+0000\') #2014-04-24T17:57:21+0000\n    #month2 = datetime.datetime.strptime(month2,\'%Y-%m-%dT%H:%M:%S+0000\')\n    now = datetime.datetime.utcnow()\n    week2 = (now - datetime.timedelta(hours=24*14)).strftime(\'%Y-%m-%d %H:%M:%S+0000\') \n    rows = fbpl(( fbpl.post.tscore <> 0) | (fbpl.post.created_time > week2 ) ).select(fbpl.post.fid)\n    \n    #row = fbpl(fbpl.post.created_time >= week2).select(fbpl.post.ALL).first()\n    return str(rows) #row.date_time\n\ndef fixtime():\n    #hour48 = (now - datetime.timedelta(days=2)).strftime(\'%Y-%m-%d %H:%M:%S\')\n    #hour48 = datetime.datetime.strptime(hour48,\'%Y-%m-%d %H:%M:%S\')\n    rows = fbpl(fbpl.post.id>0).select()\n    for row in rows:\n        created_time = row.created_time\n        updated_time= row.updated_time\n        created_time = datetime.datetime.strptime(created_time,\'%Y-%m-%d %H:%M:%S\')\n        updated_time = datetime.datetime.strptime(updated_time,\'%Y-%m-%d %H:%M:%S\')\n        \n        row.update_record(created_time=created_time,updated_time=updated_time)\n    return "success"\n\ndef hourdiff(now, hour):\n    hour48 = (now - datetime.timedelta(hours=hour)).strftime(\'%Y-%m-%d %H:%M:%S\')\n    hour48 = datetime.datetime.strptime(hour48,\'%Y-%m-%d %H:%M:%S\')\n    \n    return hour48\n\n\n@auth.requires_login()\ndef test():\n    import time\n    graph = getGraph()\n    #rows = fbpl().select(fbpl.post.ALL)\n    gid = \'652438848137404\'\n    fb_obj = graph.request(gid, args={\'fields\': \'insights\'})\n    insights=[]\n    insights = fb_obj["insights"]["data"] if  (\'insights\' in fb_obj) else []\n    lifetime_likes = sum(insights[0]["values"][2]["value"].values())\n    daily_people_talking = sum(insights[1]["values"][2]["value"].values())\n    weekly_people_talking = sum(insights[2]["values"][2]["value"].values())\n    monthly_people_talking = sum(insights[3]["values"][2]["value"].values())\n    return str(lifetime_likes) + \' \' + str(daily_people_talking) + \' \' + str(weekly_people_talking)+ \' \' +str(monthly_people_talking)\n\ndef getOpengraphImage(url):\n    op={}\n    image=\'\'\n    if (url and url<>""):\n        try:\n            op = ExtendedOpenGraph.parse(url)\n            image = op[\'image\']\n        except:\n            image=\'\'\n    return image\n\n\n@auth.requires_login()\ndef index():\n    user = auth.user\n    response.flash = T(\'You are %(name)s\', dict(name=user[\'first_name\']))\n    if  len(request.args) >= 2 and request.args[0] == \'id\':\n        fb_id = request.args[1]\n    else:\n        fb_id = \'me\'\n\n    graph = getGraph()\n    try:\n        fb_obj = graph.get_object(fb_id, metadata=1)\n    except GraphAPIError, e:\n        response.flash = "%s [%s: %s]" % (T("Logging you out!"),__name__, e)\n        redirect(auth.url(f=\'user\', args=\'logout\'))\n\n    response.menu = [[k, False, URL(r=request, f=\'connection\', args=[fb_id,k])] for k,v in  fb_obj[\'metadata\'][\'connections\'].items()]\n    return dict(message=T(\'You are at  %(fb_id)s\', dict(fb_id=fb_id)))\n\n@auth.requires_login()\ndef connection():\n    user = auth.user\n    if not len(request.args) >= 2:\n        return None\n    fb_id = request.args[0]\n    fb_connection_name = request.args[1]\n    try:\n        connections = getGraph().get_connections(fb_id, fb_connection_name)\n    except GraphAPIError, e:\n        response.flash = "%s [%s: %s]" % (T("Logging you out!"),__name__, e)\n        redirect(auth.url(f=\'user\', args=\'logout\'))\n\n\n    response.menu=[[v[\'name\'], False, URL(r=request, f=\'index\', args=[\'id\', v[\'id\']])]  for v in connections[\'data\']]\n    return dict(message=T(\'Looking list of %(conn_name)s of %(id)s\', dict(conn_name=fb_connection_name, id=fb_id)))\n\n\n\n\n@auth.requires_login()\ndef loading_list():\n    user = auth.user\n    import csv, sys\n    import datetime\n    import time\n\n    graph = getGraph()\n    reader = open(\'/Users/logyuan/Dropbox/FB_socialcount/keelung.csv\', "U")\n    errorMsg = \'\'\n    for fbplace in csv.reader(reader):\n        try:\n            id = str(fbplace[0])\n            row = fbpl.place(placeid=id)\n            if not row:\n                try:\n                    fb_obj = graph.get_object(str(fbplace[0]))\n                    #id= fb_obj["id"]\n                    name =  fb_obj["name"]\n                    category = fb_obj["category"]\n                    link= fb_obj["link"]\n                    #checkins= fb_obj["checkins"]\n                    zip= fb_obj["location"]["zip"]\n                    try:\n                        category_list =  fb_obj["category_list"]\n                    except:\n                        category_list = \'\'\n                    try:\n                        latitude= fb_obj["location"]["latitude"]\n                        longitude= fb_obj["location"]["longitude"] if (fb_obj["location"]["longitude"]) else ""\n                    except:\n                        latitude =\'\'\n                        longitude=\'\'\n                    fbpl.place.insert(placeid=id,name = name,latitude=latitude,longitude=longitude,category=category,category_list=category_list,zip=zip,link=link)\n                except GraphAPIError, e:\n                    errorMsg = errorMsg + \'errorID:\'  + str(fbplace[0]) + \'errorMessage: \' +  str(e) + \',\'\n                fbpl.commit()\n                message=\'Successfully adding new place into the database\'\n\n                time.sleep(8)\n        except GraphAPIError, e:\n            errorMsg = errorMsg + \'errorID:\'  + str(fbplace[0])  + \' errorMessage:\'  +  str(e) + \',\'\n    reader.close()\n        # or "rU"\n\n    return dict(message=T(\'list complete\'),errorMsg=errorMsg )\n\n\n\n@auth.requires_login()\ndef collect_posts():\n    import time\n    rows = fbpl().select(fbpl.page.pageid)\n    for row in rows:\n        getPagePosts(row.pageid)\n        time.sleep(1)\n    return "All page posts Finished"\n\n@auth.requires_login()\ndef getPagePosts(pageid):\n    import time\n    try:\n        graph = getGraph()\n        posts_data=graph.request(pageid + \'/posts\', args={\'fields\':\'id, place, message, updated_time, from, created_time, status_type, type, link, picture, likes.limit(1).summary(true), shares, comments.limit(1).summary(true), object_id\'})\n        data = []\n        data = posts_data["data"]\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=pageid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n        \n    try:\n        for post in data:\n            fid = post["id"].split(\'_\')[1]\n            row = fbpl.post(fid=fid)\n            if row:\n                message =  post["message"] if (\'message\' in post) else \'\'\n                updated_time = datetime.datetime.strptime(post["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'updated_time\' in post) else \'\'\n                likes_count = post["likes"]["summary"]["total_count"] if (\'likes\' in post) else 0\n                comment_count = post["comments"]["summary"]["total_count"] if (\'comments\' in post) else 0\n                shares_count = post["shares"][\'count\'] if (\'shares\' in post) else 0\n                now = datetime.datetime.utcnow()\n                hour48 = hourdiff(now,48)\n                row2 = fbpl((fbpl.post_counts.date_time <= hour48) & (fbpl.post_counts.fid==fid) ).select(fbpl.post_counts.ALL).last()\n                if row2:\n                    likes_sincelastupdate = int(likes_count)-int(row2.likes_count) if likes_count else 0\n                    shares_sincelastupdate = int(shares_count)-int(row2.shares_count) if shares_count else 0\n                    comment_sincelastupdate = int(comment_count)-int(row2.comment_count) if comment_count else 0\n                else:  #if no record can be found in the post_counts then use the last time number\n                    likes_sincelastupdate = int(likes_count)-int(row.likes_count) if likes_count else 0\n                    shares_sincelastupdate = int(shares_count)-int(row.shares_count) if shares_count else 0\n                    comment_sincelastupdate = int(comment_count)-int(row.comment_count) if comment_count else 0\n                link= row["link"]\n                object_id = row["object_id"]\n                #------------ after update it can be deleted\n                ptype = row.ptype\n                if (ptype == \'link\' ) | (ptype == \'video\'):\n                    try:\n                        picture =getOpengraphImage(link)\n                        if picture == \'\':\n                            picture = post["picture"] if (\'picture\' in post) else \'\'\n                    except:\n                        picture = post["picture"] if (\'picture\' in post) else \'\'\n                elif (ptype == \'photo\' ) :\n                    try:\n                        images=[]\n                        images =graph.request(object_id , args={\'fields\':\'images\'})["images"]\n                        for image in images:\n                            if (image["height"] > 200) & (image["width"] > 150):\n                                picture = image["source"]\n                        #time.sleep(1)\n                    except:\n                        picture = post["picture"] if (\'picture\' in post) else \'\'\n                else:\n                    picture = post["picture"] if (\'picture\' in post) else \'\'\n                    \n                row.update_record(message=message, shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, likes_sincelastupdate=likes_sincelastupdate, shares_sincelastupdate=shares_sincelastupdate, comment_sincelastupdate=comment_sincelastupdate, updated_time=updated_time,picture=picture)\n            else:\n                message =  post["message"] if (\'message\' in post) else \'\'\n                from_id = post["from"]["id"] if (\'from\' in post) else \'\'\n                from_name = post["from"]["name"] if (\'from\' in post) else \'\'\n                created_time = datetime.datetime.strptime(post["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'created_time\' in post) else \'\'\n                updated_time = datetime.datetime.strptime(post["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'updated_time\' in post) else \'\'\n                status_type = post["status_type"] if (\'status_type\' in post) else \'\'\n                ptype = post["type"] if (\'type\' in post) else \'\'\n                status_type = post["status_type"] if (\'status_type\' in post) else \'\'\n                link = post["link"] if (\'link\' in post) else \'\'\n                shares_count = post["shares"][\'count\'] if (\'shares\' in post) else 0\n                likes_count = post["likes"]["summary"]["total_count"] if (\'likes\' in post) else 0\n                comment_count = post["comments"]["summary"]["total_count"] if (\'comments\' in post) else 0\n                object_id = post["object_id"] if (\'object_id\' in post) else \'\'\n                placeid = post["place"]["id"] if (\'place\' in post) else \'\'\n                placename = post["place"]["name"] if (\'place\' in post) else \'\'\n                if placeid != \'\' : \n                    getPlace(placeid)\n                    time.sleep(1)\n                row=fbpl(fbpl.page.pageid==from_id).select().first()\n                team = row[\'team\']\n                likes_sincelastupdate=0\n                shares_sincelastupdate=0\n                comment_sincelastupdate=0\n                if (ptype == \'link\' ) | (ptype == \'video\'):\n                    try:\n                        picture =getOpengraphImage(link)\n                        if picture == \'\':\n                            picture = post["picture"] if (\'picture\' in post) else \'\'\n                    except:\n                        picture = post["picture"] if (\'picture\' in post) else \'\'\n                elif (ptype == \'photo\' ) :\n                    try:\n                        images=[]\n                        images =graph.request(object_id , args={\'fields\':\'images\'})["images"]\n                        for image in images:\n                            if (image["height"] > 200) & (image["width"] > 150):\n                                picture = image["source"]\n                        #time.sleep(1)\n                    except:\n                        picture = post["picture"] if (\'picture\' in post) else \'\'\n                else:\n                    picture = post["picture"] if (\'picture\' in post) else \'\'\n\n                fbpl.post.insert(fid=fid, message=message,from_id=from_id, from_name=from_name, created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, picture=picture ,shares_count=shares_count, likes_count=likes_count, comment_count=comment_count, likes_sincelastupdate=likes_sincelastupdate, shares_sincelastupdate=shares_sincelastupdate, comment_sincelastupdate=comment_sincelastupdate, team=team, placeid=placeid, placename=placename, updated_time=updated_time)\n                fbpl.commit()\n\n        message = "all posts finished"\n    except GraphAPIError, e:\n        raise\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n\n    return dict(message=message)\n\n@auth.requires_login()\ndef getPost(gid):\n    graph = getGraph()\n    try:\n        if gid:       \n            fb_obj = graph.request(gid,args={\'fields\': \'id, message, updated_time, from, created_time, status_type, type, link, likes.limit(1).summary(true), shares, comments.limit(1).summary(true), object_id, picture\'})\n            fid= fb_obj["id"]\n            message =  fb_obj["message"] if (\'message\' in fb_obj) else \'\'\n            created_time = datetime.datetime.strptime(fb_obj["created_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'created_time\' in fb_obj) else \'\'\n            updated_time = datetime.datetime.strptime(fb_obj["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'updated_time\' in fb_obj) else \'\'\n            from_id = fb_obj["from"]["id"] if (\'from\' in fb_obj) else \'\'\n            from_name = fb_obj["from"]["name"] if (\'from\' in fb_obj) else \'\'\n            status_type = fb_obj["status_type"] if (\'status_type\' in fb_obj) else \'\'\n            ptype = fb_obj["type"] if (\'type\' in fb_obj) else \'\'\n            status_type = fb_obj["status_type"] if (\'status_type\' in fb_obj) else \'\'\n            link =  fb_obj["link"] if (\'link\' in fb_obj) else \'\'\n            #picture =  fb_obj["picture"] if (\'picture\' in fb_obj) else \'\'\n            shares_count = fb_obj["shares"][\'count\'] if (\'shares\' in fb_obj) else 0\n            likes_count = fb_obj["likes"]["summary"]["total_count"] if (\'summary\' in fb_obj) else 0\n            comment_count = fb_obj["comments"]["summary"]["total_count"] if (\'summary\' in fb_obj) else 0\n            object_id = fb_obj["object_id"] if (\'object_id\' in fb_obj) else \'\'\n            row=fbpl(fbpl.page.pageid==from_id).select().first()\n            team = row[\'team\']                \n            if (ptype == \'link\' ) | (ptype == \'video\'):\n                try:\n                    picture =getOpengraphImage(link)\n                    if picture == \'\':\n                        picture = post["picture"] if (\'picture\' in post) else \'\'\n                except:\n                    picture = post["picture"] if (\'picture\' in post) else \'\'\n            elif (ptype == \'photo\' ) :\n                try:\n                    images=[]\n                    images =graph.request(object_id , args={\'fields\':\'images\'})["images"]\n                    for image in images:\n                        if (image["height"] > 200):\n                            picture = image["source"]\n                except:\n                    picture = post["picture"] if (\'picture\' in post) else \'\'\n            else:\n                picture = post["picture"] if (\'picture\' in post) else \'\'\n            \n            \n            row = fbpl(fbpl.post.fid==from_id).select().first()\n            if row:\n                row.update_record(fid=fid, message=message,from_id=from_id, from_name=from_name, created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, picture=picture ,shares_count=shares_count,likes_count=likes_count,comment_count=comment_count,team=team, updated_time=updated_time)\n            else:\n                fbpl.post.insert(fid=fid, message=message,from_id=from_id, from_name=from_name, created_time=created_time,object_id=object_id,ptype=ptype,status_type=status_type, link=link, picture=picture ,shares_count=shares_count,likes_count=likes_count,comment_count=comment_count,team=team, updated_time=updated_time)\n                fbpl.commit()\n            message=\'Successfully adding new post into the database\'            \n        else:\n            message=\'failure, please check your postid!\'       \n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=gid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit() \n    \n    \n    return dict(message=message) \n\n\n@auth.requires_login()\ndef getPage(gid,team):\n    graph = getGraph()\n    try:\n        if gid:\n            fb_obj = graph.request(gid ,args={\'fields\': \'id, name, category, about, can_post, checkins, talking_about_count, were_here_count, link,description, cover, website, picture.type(large), is_published,likes.limit(1).summary(true), insights\'})\n            id= fb_obj["id"]\n            pageid = fb_obj["id"]\n            name =  fb_obj["name"] if (\'name\' in fb_obj) else \'\'\n            category = fb_obj["category"] if (\'category\' in fb_obj) else \'\'\n            about = fb_obj["about"] if (\'about\' in fb_obj) else \'\'\n            can_post = fb_obj["can_post"] if (\'can_post\' in fb_obj) else \'\'\n            is_published = fb_obj["is_published"] if (\'is_published\' in fb_obj) else \'\'\n            talking_about_count = fb_obj["talking_about_count"] if (\'talking_about_count\' in fb_obj) else 0\n            were_here_count = fb_obj["were_here_count"] if (\'were_here_count\' in fb_obj) else 0\n            link = fb_obj["link"] if (\'link\' in fb_obj) else \'\'\n            likes = fb_obj["likes"] if (\'likes\' in fb_obj) else \'\'\n            description = fb_obj["description"] if (\'description\' in fb_obj) else \'\'                \n            cover_id = fb_obj["cover"]["cover_id"] if (\'cover\' in fb_obj) else \'\'\n            source = fb_obj["cover"]["source"] if (\'cover\' in fb_obj) else \'\'\n            picture = fb_obj["picture"]["data"]["url"] if (\'picture\' in fb_obj) else \'\'\n            team=team    \n            website = fb_obj["website"] if (\'website\' in fb_obj) else \'\'\n            row = fbpl(fbpl.page.pageid==id).select().first()\n            if row :\n                row.update_record(name=name, category=category, about=about, can_post=can_post, is_published=is_published, link=link, description=description, cover_id=cover_id, source=source,website=website,talking_about_count=talking_about_count,were_here_count=were_here_count,picture=picture,team=team)\n            else:\n                fbpl.page.insert(pageid=pageid,name=name, category=category, about=about, can_post=can_post, is_published=is_published, link=link, description=description, cover_id=cover_id, source=source,website=website,talking_about_count=talking_about_count,were_here_count=were_here_count,picture=picture,team=team)\n            fbpl.commit()\n            message=\'Successfully adding new page into the database\'\n        else:\n            message=\'failure, please check your pageid!\'\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=gid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n\n    return dict(message=message)\n\n\n\n\n\n\n\n@auth.requires_login()\ndef getPageSocialCount(gid):\n    import datetime\n    import time\n    graph = getGraph()\n    try:\n        if gid:\n            oid = gid\n        else:\n            message=\'failure, please check your placeid!\'\n            return dict(message=message)\n        pid = checkGraphId(oid)\n        if pid <> \'0\':\n            if pid <> oid :\n                record2 = fbpl(fbpl.page.pageid==pid).select().first()\n                if not (record2) :\n                   getPage(pid)\n                   time.sleep(1)\n                   fbpl(fbpl.page.pageid==oid).delete()\n            fb_obj = graph.request(pid ,args={\'fields\': \'id,name, category, about, can_post, checkins, talking_about_count, were_here_count, link,description, cover, website, picture.type(large), is_published,likes.limit(1).summary(true), insights\'})\n            checkins =  fb_obj["checkins"] if  (\'checkins\' in fb_obj) else 0\n            likes= fb_obj["likes"] if  (\'likes\' in fb_obj) else 0\n            were_here_count= fb_obj["were_here_count"] if  (\'were_here_count\' in fb_obj) else 0\n            talking_about_count\t = fb_obj["talking_about_count"] if  (\'talking_about_count\' in fb_obj) else 0\n            updated_time = datetime.datetime.utcnow().strftime(\'%Y-%m-%dT%H:%M:%S+0000\')\n            updated_time = datetime.datetime.strptime(updated_time,\'%Y-%m-%dT%H:%M:%S+0000\')\n            date_time = datetime.datetime.today().strftime(\'%Y-%m-%d %H:%M:%S\')\n            date_time = datetime.datetime.strptime(date_time,\'%Y-%m-%d %H:%M:%S\')\n            row = fbpl.page(pageid=pid)\n            if row:\n                #social_counts used s local_time, it is better in the future all the Fields use the UTC time format \n                now = datetime.datetime.now()\n                hour24 = hourdiff(now,24)\n                row2 = fbpl((fbpl.social_counts.date_time <= hour24) & (fbpl.social_counts.placeid==pid) ).select(fbpl.social_counts.ALL).last()\n                if row2:\n                    likes_sincelastupdate = int(likes)-int(row2.likes) if likes else 0\n                    checkins_sincelastupdate = int(checkins)-int(row2.checkins) if checkins else 0\n                    talking_about_sincelastupdate = int(talking_about_count)-int(row2.talking_about_count) if talking_about_count else 0\n                    were_here_sincelastupdate = int(were_here_count)-int(row2.were_here_count) if were_here_count else 0\n                else:  #if no record can be found in the social_counts then use the last time number\n                    likes_sincelastupdate = int(likes)-int(row.likes) if likes else 0\n                    checkins_sincelastupdate = int(checkins)-int(row.checkins) if checkins else 0\n                    talking_about_sincelastupdate = int(talking_about_count)-int(row.talking_about_count) if talking_about_count else 0\n                    were_here_sincelastupdate = int(were_here_count)-int(row.were_here_count) if were_here_count else 0\n                row.update_record(checkins = checkins, likes=likes, date_time=date_time, were_here_count=were_here_count, updated_time=updated_time, talking_about_count=talking_about_count, likes_sincelastupdate=likes_sincelastupdate, talking_about_sincelastupdate=talking_about_sincelastupdate, checkins_sincelastupdate=checkins_sincelastupdate, were_here_sincelastupdate=were_here_sincelastupdate)\n            else: \n                likes_sincelastupdate =  0\n                checkins_sincelastupdate =  0\n                talking_about_sincelastupdate = 0\n                were_here_sincelastupdate = 0\n                fbpl.page.insert(pageid=pid, checkins = checkins, likes=likes, date_time=date_time, were_here_count=were_here_count, updated_time=updated_time, talking_about_count=talking_about_count, likes_sincelastupdate=likes_sincelastupdate, talking_about_sincelastupdate=talking_about_sincelastupdate, checkins_sincelastupdate=checkins_sincelastupdate, were_here_sincelastupdate=were_here_sincelastupdate)\n                fbpl.commit()\n            fbpl.social_counts.insert(placeid=pid,checkins = checkins,likes=likes,date_time=date_time,were_here_count=were_here_count,updated_time=updated_time,talking_about_count=talking_about_count)\n            fbpl.commit()\n            time.sleep(1.1)\n            message=\'Successfully update the PageSocialCount\'\n            return dict(message=message)\n        else:\n            return dict(message=\'failure, please check your placeid!\')\n\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=pid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n    \n    #response.menu = [[k, False, URL(r=request, f=\'connection\', args=[fb_id,k])] for k,v in  fb_obj[\'metadata\'][\'connections\'].items()]\n    return dict(message=message)  #dict(message=str[9])\n\n\n\n\n@auth.requires_login()\ndef getPostSocialCount(from_id,fid):\n    import datetime\n    import time\n    graph = getGraph()\n    try:\n        if fid:\n            fb_obj = graph.request(from_id + \'_\' + fid ,args={\'fields\': \'id, shares, updated_time,comments.limit(1).summary(true), message, likes.limit(1).summary(true)\'})\n\n            shares_count = int(fb_obj["shares"]["count"]) if (\'shares\' in fb_obj) else 0\n            updated_time = datetime.datetime.strptime(fb_obj["updated_time"],\'%Y-%m-%dT%H:%M:%S+0000\') if  (\'updated_time\' in fb_obj) else \'\'\n            likes_count = int(fb_obj["likes"]["summary"]["total_count"]) if (\'likes\' in fb_obj) else 0\n            comment_count = int(fb_obj["comments"]["summary"]["total_count"]) if (\'comments\' in fb_obj) else 0\n            date_time = datetime.datetime.today()\n            row = fbpl(fbpl.post.fid==str(fid)).select().first()\n            if row :\n                #post used s local_time, it is better in the future all the Fields use the UTC time format \n                now = datetime.datetime.now()\n                hour48 = hourdiff(now,48)\n                row2 = fbpl((fbpl.post_counts.date_time >= hour48) & (fbpl.post_counts.fid==fid) ).select(fbpl.post_counts.ALL).first()\n                if row2:\n                    likes_sincelastupdate = int(likes_count)-int(row2.likes_count) if likes_count else 0\n                    shares_sincelastupdate = int(shares_count)-int(row2.shares_count) if shares_count else 0\n                    comment_sincelastupdate = int(comment_count)-int(row2.comment_count) if comment_count else 0\n                else:  #if no record can be found in the post_counts then use the last time number\n                    likes_sincelastupdate = int(likes_count)-int(row.likes_count) if likes_count else 0\n                    shares_sincelastupdate = int(shares_count)-int(row.shares_count) if shares_count else 0\n                    comment_sincelastupdate = int(comment_count)-int(row.comment_count) if comment_count else 0\n                    \n                fscore = shares_sincelastupdate*0.5 + comment_sincelastupdate*0.3 + likes_sincelastupdate*0.2\n                tscore = shares_count*0.5 + comment_count*0.3 + likes_count*0.2\n                row.update_record(updated_time=updated_time, shares_count=shares_count, likes_count=likes_count, comment_count=comment_count,likes_sincelastupdate=likes_sincelastupdate,shares_sincelastupdate=shares_sincelastupdate,comment_sincelastupdate=comment_sincelastupdate, fscore=fscore)\n\n            fbpl.post_counts.insert(fid=fid, updated_time=updated_time, shares_count=shares_count, date_time=date_time, likes_count=likes_count, comment_count=comment_count)\n            \n            fbpl.commit()\n            time.sleep(1)\n            message=\'Successfully update the PostSocialCount\'\n            return dict(message=message)\n        else:\n            return dict(message=\'failure, please check your placeid!\')\n\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=fid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n    #response.menu = [[k, False, URL(r=request, f=\'connection\', args=[fb_id,k])] for k,v in  fb_obj[\'metadata\'][\'connections\'].items()]\n    return dict(message=message)  #dict(message=str[9])\n\n\n\n@auth.requires_login()\ndef getPlace(gid):\n    import datetime\n    import time\n    graph = getGraph()\n    try:\n        gid = checkGraphId(gid) \n        if gid <> \'0\':              \n            fb_obj = graph.get_object(gid)\n            row = fbpl.place(placeid=gid)\n            if not row: \n                name =  fb_obj["name"] if (\'name\' in fb_obj) else \'\'\n                category = fb_obj["category"] if (\'category\' in fb_obj) else \'\'\n                category_list =  fb_obj["category_list"] if (\'category_list\' in fb_obj) else \'\'\n                link= fb_obj["link"] if (\'link\' in fb_obj) else \'\'\n                website =fb_obj["website"] if (\'website\' in fb_obj) else \'\'\n                phone =fb_obj["phone"] if (\'phone\' in fb_obj) else \'\'\n                description =fb_obj["description"] if (\'description\' in fb_obj) else \'\'\n     \n                if (\'location\' in fb_obj):\n                    zip= fb_obj["location"]["zip"] if (\'zip\' in fb_obj["location"]) else \'\'\n                    street= fb_obj["location"]["street"] if (\'street\' in fb_obj["location"]) else \'\'\n                    city= fb_obj["location"]["city"] if (\'city\' in fb_obj["location"]) else \'\'\n                    state= fb_obj["location"]["state"] if (\'state\' in fb_obj["location"]) else \'\'\n                    country=fb_obj["location"]["country"] if (\'country\' in fb_obj["location"]) else \'\'\n                    latitude= fb_obj["location"]["latitude"] if (\'latitude\' in fb_obj["location"]) else \'\'\n                    longitude= fb_obj["location"]["longitude"] if (\'longitude\' in fb_obj["location"]) else \'\'\n                    mutiple = \'No\'\n                else:\n                    zip= \'\'\n                    street= \'\'\n                    city= \'\'\n                    state= \'\'\n                    country= \'\'\n                    latitude= \'\'\n                    longitude= \'\'\n                old_ids = \'\'\n                fbpl.place.insert(placeid=gid,name = name,latitude=latitude,longitude=longitude,category=category,category_list=category_list,zip=zip,link=link,old_ids=old_ids)\n\n            fbpl.commit()\n            message=\'Successfully adding new place into the database\'\n        else:\n            message=\'failure, please check your placeid!\'\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=gid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n\n    return dict(message=message)\n\n\n@auth.requires_login()\ndef getPlace_f():\n    graph = getGraph()\n    try:\n        if request.vars[\'gid\']:\n            gid = request.vars[\'gid\']\n            fb_obj = graph.get_object(gid)\n            id= fb_obj["id"]\n            row = fbpl.place(placeid=id)\n            if not row:\n                name =  fb_obj["name"]\n                category = fb_obj["category"]\n                category_list =  fb_obj["category_list"]\n                checkins= fb_obj["checkins"]\n                zip= fb_obj["location"]["zip"]\n                latitude= fb_obj["location"]["latitude"]\n                longitude= fb_obj["location"]["longitude"]\n                link= fb_obj["link"]\n                old_ids = \'\'\n                fbpl.place.insert(placeid=id,name = name,latitude=latitude,longitude=longitude,category=category,category_list=category_list,zip=zip,link=link,old_ids=old_ids)\n\n            fbpl.commit()\n            message=\'Successfully adding new place into the database\'\n        else:\n            message=\'failure, please check your placeid!\'\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=pid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n\n    return dict(message=message)\n\n@auth.requires_login()\ndef getEvent(eid):\n    graph = getGraph()\n    try:\n        event= graph.get_object(eid)\n        eventid = event["id"] if \'id\' in event else \'\'\n        row = fbpl.event(eventid=eventid)\n        if not row:\n            description = event["description"] if \'description\' in event else \'\'\n            end_time  = event["end_time"] if \'end_time\' in event else \'\'\n            timezone = event["timezone"] if \'timezone\' in event else \'\'\n            name = event["name"] if \'name\' in event else \'\'\n            location = event["location"] if \'location\' in event else \'\'\n            ownerid = event["owner"]["id"] if \'owner\' in event else \'\'\n            picture = event["picture"] if \'picture\' in event else \'\'\n            privacy = event["privacy"] if \'privacy\' in event else \'\'\n            start_time = event["start_time"] if \'start_time\' in event else \'\'\n            ticket_uri = event["ticket_uri"] if \'ticket_uri\' in event else \'\'\n            updated_time = event["updated_time"] if \'updated_time\' in event else \'\'\n            is_date_only  = event["is_date_only"] if \'is_date_only\' in event else \'\'\n            if \'venue\' in event:\n                venueid  = event["venue"]["id"] if \'id\' in event["venue"] else \'\'\n                venuename = event["venue"]["name"] if \'name\' in event["venue"] else \'\'\n                country = event["venue"]["country"] if \'country\' in event["venue"] else \'\'\n                city = event["venue"]["city"] if \'city\' in event["venue"] else \'\'\n                state  = event["venue"]["state"] if \'state\' in event["venue"] else \'\'\n                street = event["venue"]["street"] if \'street\' in event["venue"] else \'\'\n                zipcode = event["venue"]["zip"] if \'zip\' in event["venue"] else \'\'\n                longitude = event["venue"]["longitude"] if \'longitude\' in event["venue"] else \'\'\n                latitude  = event["venue"]["latitude"] if \'latitude\' in event["venue"] else \'\'\n            fbpl.event.insert(eventid=eventid, description=description, end_time=end_time, timezone=timezone, name=name, location=location, ownerid=ownerid, picture=picture, privacy=privacy, start_time=start_time, ticket_uri=ticket_uri, updated_time=updated_time, is_date_only=is_date_only, venuename=venuename, venueid=venueid, country=country, city=city, state=state, street=street, zipcode=zipcode, longitude=longitude, latitude=latitude)\n            fbpl.commit()\n            message=\'Successfully adding new event into the database\'\n        else:\n            message=\'failure, please check your eventid!\'\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=eventid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n    return dict(message=message)\n\n@auth.requires_login()\ndef getSocialCount():\n    import datetime\n    import time\n    graph = getGraph()\n    try:\n        if request.vars[\'gid\']:\n            oid = request.vars[\'gid\']\n        else:\n            message=\'failure, please check your placeid!\'\n            return dict(message=message)\n        pid = checkGraphId(oid)\n        if pid <> \'0\':\n            if pid <> oid :\n                record = fbpl(fbpl.place.placeid==oid).select().first()\n                record2 = fbpl(fbpl.place.placeid==pid).select().first()\n                if not (record2) :\n                   getPlace(pid)\n                   time.sleep(1)\n                   record2 = fbpl(fbpl.place.placeid==pid).select().first()\n                   oids = []\n                   oids.append(oid)\n                   record2.update_record(old_ids=oids)\n                   fbpl(fbpl.place.placeid==oid).delete()\n                else:\n                   fbpl(fbpl.place.placeid==oid).delete()\n                   oids = []\n                   oids.append(record2.old_ids)\n                   oids.append(oid)\n                   record2.update_record(old_ids=oids)\n            fb_obj = graph.get_object(pid)\n            try:\n                checkins =  fb_obj["checkins"]\n            except:\n                checkins=\'\'\n            try:\n                likes= fb_obj["likes"]\n            except:\n                likes=\'\'\n            try:\n                were_here_count= fb_obj["were_here_count"]\n            except:\n                were_here_count=\'\'\n            date_time = datetime.datetime.today()\n            fbpl.social_counts.insert(placeid=pid,checkins = checkins,likes=likes,date_time=date_time,were_here_count=were_here_count)\n            fbpl.commit()\n            time.sleep(1.1)\n            message=\'Successfully found the place\'\n            return dict(message=message)\n        else:\n            return dict(message=\'failure, please check your placeid!\')\n\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=pid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n\n    #response.menu = [[k, False, URL(r=request, f=\'connection\', args=[fb_id,k])] for k,v in  fb_obj[\'metadata\'][\'connections\'].items()]\n    return dict(message=message)  #dict(message=str[9])\n\n@auth.requires_login()\ndef getSocialCount_f(gid):\n    import datetime\n    import time\n    graph = getGraph()\n    try:\n        if gid:\n            oid = gid\n        else:\n            message=\'failure, please check your placeid!\'\n            return dict(message=message)\n        pid = checkGraphId(oid)\n        if pid <> \'0\':\n            if pid <> oid :\n                record = fbpl(fbpl.place.placeid==oid).select().first()\n                record2 = fbpl(fbpl.place.placeid==pid).select().first()\n                if not (record2) :\n                    getPlace(pid)\n                    time.sleep(1)\n                    record2 = fbpl(fbpl.place.placeid==pid).select().first()\n                    oids = []\n                    oids.append(oid)\n                    record2.update_record(old_ids=oids)\n                    fbpl(fbpl.place.placeid==oid).delete()\n                else:\n                   fbpl(fbpl.place.placeid==oid).delete()\n                   oids = []\n                   oids.append(record2.old_ids)\n                   oids.append(oid)\n                   record2.update_record(old_ids=oids)\n            fb_obj = graph.get_object(pid)\n            try:\n                checkins =  fb_obj["checkins"]\n            except:\n                checkins=\'\'\n            try:\n                likes= fb_obj["likes"]\n            except:\n                likes=\'\'\n            try:\n                were_here_count= fb_obj["were_here_count"]\n            except:\n                were_here_count=\'\'\n            date_time = datetime.datetime.today()\n            fbpl.social_counts.insert(placeid = pid, checkins = checkins,likes=likes,date_time=date_time,were_here_count=were_here_count)\n            fbpl.commit()\n            time.sleep(1.1)\n            message=\'Successfully found the place\'\n            return dict(message=message)\n        else:\n            return dict(message=\'failure, please check your placeid!\')\n\n    except GraphAPIError, e:\n        message=e.result\n        fbpl.graphAPI_Error.insert(placeid=pid,date_time=datetime.datetime.today(),error_msg=message)\n        fbpl.commit()\n    except:\n        raise\n\n    #response.menu = [[k, False, URL(r=request, f=\'connection\', args=[fb_id,k])] for k,v in  fb_obj[\'metadata\'][\'connections\'].items()]\n    return dict(message=message)  #dict(message=str[9])\n\n\n\n\n\n@auth.requires_login()\ndef checkGraphId_f():\n    import datetime\n    import time\n    graph = getGraph()\n    if request.vars[\'gid\']:\n        graphid = request.vars[\'gid\']\n    else:\n        return dict(message=\'failure, please check your placeid!\')\n\n    new_graphid = graphid\n    try:\n        fb_obj = graph.get_object(graphid)\n    except GraphAPIError, r:\n        message=r.result\n        code =message[\'error\'][\'code\']\n        fbpl.graphAPI_Error.insert(placeid=graphid,date_time=datetime.datetime.today(),code =code,error_msg=message)\n        fbpl.commit()\n        if code == 21:\n            id=message[\'error\'][\'message\'].split(\' \')\n            new_graphid = id[9].strip(\'.\')\n            try:\n                fb_obj = graph.get_object(new_graphid)\n            except GraphAPIError, e:\n                time.sleep(1)\n                new_graphid = checkGraphId(new_graphid)\n            try:\n                row = fbpl.place(placeid=graphid)\n                fbpl.merged_place.insert(placeid=graphid,date_time=datetime.datetime.today(),merge_to = new_graphid,name = row.name, latitude=row.latitude,longitude=row.longitude,category=row.category,category_list=row.category_list,zip=row.zip,link=row.link,old_ids=row.old_ids)\n            except:\n                message = \'No this id in the DB\'\n        else:\n            new_graphid = \'0\'\n\n    return new_graphid\n\n\n\n\n@auth.requires_login()\ndef checkGraphId(graphid):\n    import datetime\n    import time\n    graph = getGraph()\n    new_graphid = graphid\n    try:\n        fb_obj = graph.get_object(graphid)\n    except GraphAPIError, r:\n        message=r.result\n        code =message[\'error\'][\'code\']\n        fbpl.graphAPI_Error.insert(placeid=graphid,date_time=datetime.datetime.today(),code =code,error_msg=message)\n        fbpl.commit()\n        if code == 21:\n            id=message[\'error\'][\'message\'].split(\' \')\n            new_graphid = id[9].strip(\'.\')\n            try:\n                fb_obj = graph.get_object(new_graphid)\n            except GraphAPIError, e:\n                time.sleep(1)\n                new_graphid = checkGraphId(new_graphid)\n            try:\n                row = fbpl.place(placeid=graphid)\n                fbpl.merged_place.insert(placeid=graphid,date_time=datetime.datetime.today(),merge_to = new_graphid,name = row.name, latitude=row.latitude,longitude=row.longitude,category=row.category,category_list=row.category_list,zip=row.zip,link=row.link,old_ids=row.old_ids)\n            except:\n                message = \'No this id in the DB\'\n        else:\n            new_graphid = \'0\'\n\n    return new_graphid\n\n\n@auth.requires_login()\ndef countAllPlaceSocialCount():\n    import datetime\n    import time\n\n    graph = getGraph()\n    rows = fbpl().select(fbpl.place.placeid,fbpl.place.old_ids, orderby=fbpl.place.id)\n    start_date_time=datetime.datetime.today()\n\n    for row in rows:\n        pid= row.placeid\n        #check if the Facebook has the graphic\n        getSocialCount_f(pid)\n\n    end_date_time=datetime.datetime.today()\n    fbpl.update_log.insert(start_date_time=start_date_time,end_date_time=end_date_time)\n    message = \'Successfully update socialcount of places\'\n    return dict(message=message)\n\n@auth.requires_login()\ndef countAllPageSocialCount():\n    import datetime\n    import time\n\n    graph = getGraph()\n    rows = fbpl().select(fbpl.page.pageid, orderby=fbpl.page.id)\n    start_date_time=datetime.datetime.today()\n\n    for row in rows:\n        gid= row.pageid\n        #check if the Facebook has the graphic\n        getPageSocialCount(gid)\n        \n    message = teamCount()\n    end_date_time=datetime.datetime.today()\n    fbpl.update_log.insert(start_date_time=start_date_time,end_date_time=end_date_time)\n    message = \'Successfully update socialcount of pages\'\n    return dict(message=message)\n\n\n@auth.requires_login()\ndef countAllPostSocialCount():\n    import datetime\n    import time\n    now = datetime.datetime.utcnow()\n    #Only do the update when the tscore > 0 or the post is within the last one weeks\n    week2 = (now - datetime.timedelta(hours=24*7)).strftime(\'%Y-%m-%d %H:%M:%S+0000\')     \n    rows = fbpl(( fbpl.post.tscore <> 0) | (fbpl.post.created_time > week2 ) ).select(fbpl.post.fid,fbpl.post.from_id, orderby=fbpl.post.id)\n    start_date_time=datetime.datetime.today()\n\n    for row in rows:\n        gid= row.fid\n        from_id = row.from_id\n        #check if the Facebook has the graphic\n        getPostSocialCount(from_id,gid)\n        \n    \n    end_date_time=datetime.datetime.today()\n    fbpl.update_log.insert(start_date_time=start_date_time,end_date_time=end_date_time)\n    message = \'Successfully update socialcount of posts\'\n    return dict(message=message)\n\n\n\n\n\n@auth.requires_login()\ndef countTscore():\n    #fbpl(fbpl.post.id>0).update(tscore= fbpl.post.likes_count*0.2+fbpl.post.shares_count*0.5+fbpl.post.comment_count*0.3)\n    rows= fbpl().select(fbpl.post.ALL)\n    for row in rows:\n        tscore = row.shares_count*0.5 + row.comment_count*0.3 + row.likes_count*0.2\n        row.update_record(tscore=tscore)\n    return "success"\n\nresponse._vars=response._caller(teamCount)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.AttributeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.AttributeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.AttributeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.AttributeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.AttributeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.AttributeError object>'
p23
sS'args'
p24
S'("\'Table\' object has no attribute \'date_time\'",)'
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.AttributeError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.AttributeError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.AttributeError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.AttributeError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.AttributeError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.AttributeError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.AttributeError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.AttributeError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.AttributeError object>'
p47
sS'__doc__'
p48
S"'Attribute not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.AttributeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'Table' object has no attribute 'date_time'"
p55
sS'request'
p56
cgluon.html
XML_unpickle
p57
(S's#\\\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>fbmayor</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>graphAPI</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-a9d18d50-d416-4fd3-9c2e-efe764b926ac<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_fbmayor</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bde27a7a-47d4-49f2-86c1-7e875b82d88f<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-6ef2296f-745e-4c28-bc57-7b311dc1e717<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-us</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_admin=127.0.0.1-a9d18d50-d416-4fd3-9c2e-efe764b926ac; session_id_fbmayor=127.0.0.1-bde27a7a-47d4-49f2-86c1-7e875b82d88f; session_id_welcome=127.0.0.1-6ef2296f-745e-4c28-bc57-7b311dc1e717</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_DNT</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/537.75.14</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/fbmayor/graphAPI/teamCount</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>63547</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>maclogair.local</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/Applications/web2py.app/Contents/Resources/applications/ADMIN/&#x27;, &#x27;/Applications/web2py.app/Contents/Resources/applications/fbmayor/&#x27;, &#x27;/Applications/web2py.app/Contents/Resources/applications/admin/&#x27;, &#x27;/Applications/web2py.app/Contents/Resources/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/Applications/web2py.app/Contents/Resources</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x1040fbd40: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;fe80::60c:ceff:fee3:df4a%en0&#x27;, &#x27;192.168.100.4&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;maclogair.local&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/Applications/web2py.app/Contents/Resources&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/Applications/web2py.app/Contents/Resources</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-us</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_admin=127.0.0.1-a9d18d50-d416-4fd3-9c2e-efe764b926ac; session_id_fbmayor=127.0.0.1-bde27a7a-47d4-49f2-86c1-7e875b82d88f; session_id_welcome=127.0.0.1-6ef2296f-745e-4c28-bc57-7b311dc1e717</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_dnt</td><td style="vertical-align:top;">:</td><td><div>1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/537.75.14</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>192.168.100.4</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>fe80::60c:ceff:fee3:df4a%en0</div></td></tr><tr><td><div>maclogair.local</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/fbmayor/graphAPI/teamCount</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>63547</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/fbmayor/graphAPI/teamCount</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>maclogair.local</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8088</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/Applications/web2py.app/Contents/Resources</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.8.2-stable+timestamp.2013.11.28.13.54.07</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x10028b1e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x1040b8328&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x10d5ccd50&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x10028b1e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x1040b8328&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x10d5ccd50&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/Applications/web2py.app/Contents/Resources/applications/fbmayor/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>teamCount</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/Applications/web2py.app/Contents/Resources/applications/ADMIN/&#x27;, &#x27;/Applications/web2py.app/Contents/Resources/applications/fbmayor/&#x27;, &#x27;/Applications/web2py.app/Contents/Resources/applications/admin/&#x27;, &#x27;/Applications/web2py.app/Contents/Resources/applications/welcome/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/Applications/web2py.app/Contents/Resources</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x1040fbd40: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;ips&#x27;: [&#x27;fe80::60c:ceff:fee3:df4a%en0&#x27;, &#x27;192.168.100.4&#x27;], &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;port&#x27;: 8000, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;maclogair.local&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/Applications/web2py.app/Contents/Resources&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;scheduler_groups&#x27;: None, &#x27;password&#x27;: &#x27;&lt;ask&gt;&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/Applications/web2py.app/Contents/Resources</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>192.168.100.4</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>fe80::60c:ceff:fee3:df4a%en0</div></td></tr><tr><td><div>maclogair.local</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.8.2-stable+timestamp.2013.11.28.13.54.07</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2014, 4, 28, 15, 50, 30, 894438)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/fbmayor/graphAPI/teamCount</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2014, 4, 28, 7, 50, 30, 894447)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uuid</td><td style="vertical-align:top;">:</td><td><div>fbmayor/127.0.0.1.2014-04-28.15-50-30.e5060948-95c2-4d0b-b4d5-4f5c2da16aec</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x10d6edc50&gt;</div></td></tr></table></div>'
tRp58
sS'frames'
p59
(lp60
(dp61
S'file'
p62
S'/Applications/web2py.app/Contents/Resources/gluon/restricted.py'
p63
sS'dump'
p64
(dp65
S'environment'
p66
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}"
p67
sS'ccode'
p68
S'<code object <module> at 0x104d3d230, file "/App...cations/fbmayor/controllers/graphAPI.py", line 2>'
p69
ssS'lnum'
p70
I217
sS'lines'
p71
(dp72
I212
S'    try:'
p73
sI213
S'        if isinstance(code, types.CodeType):'
p74
sI214
S'            ccode = code'
p75
sI215
S'        else:'
p76
sI216
S'            ccode = compile2(code, layer)'
p77
sI217
S'        exec ccode in environment'
p78
sI218
S'    except HTTP:'
p79
sI219
S'        raise'
p80
sI220
S'    except RestrictedError:'
p81
sI221
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p82
ssS'call'
p83
S'(code=\'# -*- coding: utf-8 -*-\\nimport ExtendedOpenGraph...ess"\\n\\nresponse._vars=response._caller(teamCount)\\n\', environment={\'A\': <class \'gluon.html.A\'>, \'ANY_OF\': <class \'gluon.validators.ANY_OF\'>, \'Auth\': <class \'gluon.tools.Auth\'>, \'B\': <class \'gluon.html.B\'>, \'BEAUTIFY\': <class \'gluon.html.BEAUTIFY\'>, \'BODY\': <class \'gluon.html.BODY\'>, \'BR\': <class \'gluon.html.BR\'>, \'BUTTON\': <class \'gluon.html.BUTTON\'>, \'CAT\': <class \'gluon.html.CAT\'>, \'CENTER\': <class \'gluon.html.CENTER\'>, ...}, layer=\'/Applications/web2py.app/Contents/Resources/applications/fbmayor/controllers/graphAPI.py\')'
p84
sS'func'
p85
S'restricted'
p86
sa(dp87
g62
S'/Applications/web2py.app/Contents/Resources/applications/fbmayor/controllers/graphAPI.py'
p88
sg64
(dp89
sg70
I1021
sg71
(dp90
I1010
S''
sI1011
S''
sI1012
S'@auth.requires_login()'
p91
sI1013
S'def countTscore():'
p92
sI1014
S'    #fbpl(fbpl.post.id>0).update(tscore= fbpl.post.likes_count*0.2+fbpl.post.shares_count*0.5+fbpl.post.comment_count*0.3)'
p93
sI1015
S'    rows= fbpl().select(fbpl.post.ALL)'
p94
sI1016
S'    for row in rows:'
p95
sI1017
S'        tscore = row.shares_count*0.5 + row.comment_count*0.3 + row.likes_count*0.2'
p96
sI1018
S'        row.update_record(tscore=tscore)'
p97
sI1019
S'    return "success"'
p98
ssg83
S'()'
p99
sg85
S'<module>'
p100
sa(dp101
g62
S'/Applications/web2py.app/Contents/Resources/gluon/globals.py'
p102
sg64
(dp103
S'self'
p104
S'undefined'
p105
sS'f'
S'<function teamCount>'
p106
ssg70
I372
sg71
(dp107
I367
S'        self.menu = []             # used by the default view layout'
p108
sI368
S'        self.files = []            # used by web2py_ajax.html'
p109
sI369
S'        self.generic_patterns = []  # patterns to allow generic views'
p110
sI370
S"        self.delimiters = ('{{', '}}')"
p111
sI371
S'        self._vars = None'
p112
sI372
S'        self._caller = lambda f: f()'
p113
sI373
S'        self._view_environment = None'
p114
sI374
S'        self._custom_commit = None'
p115
sI375
S'        self._custom_rollback = None'
p116
sI376
S''
ssg83
S'(f=<function teamCount>)'
p117
sg85
S'<lambda>'
p118
sa(dp119
g62
S'/Applications/web2py.app/Contents/Resources/applications/fbmayor/controllers/graphAPI.py'
p120
sg64
(dp121
S'date_time'
p122
S'datetime.datetime(2014, 4, 28, 0, 0)'
p123
sS'global fbpl'
p124
S'<DAL uri="mongodb://localhost/fbmayor">'
p125
sS'candidate'
p126
S"'\\xe9\\x80\\xa3\\xe5\\x8b\\x9d\\xe6\\x96\\x87'"
p127
sS'fbpl.post'
p128
S'<Table post (id,fid,message,from_id,from_name,cr...lastupdate,team,placeid,placename,fscore,tscore)>'
p129
sS').select'
p130
g105
sS'fbpl.team_counts.team'
p131
S'<gluon.dal.Field object>'
p132
sS'fbpl.team_counts'
p133
S'<Table team_counts (id,team,date_time,checkins,l...likes,hour48_video_comments,hour48_video_shares)>'
p134
sS'fbpl.post.date_time'
p135
g105
sS'row'
p136
S"<Row {'shares_sincelastupdate': 0L, 'ptype': 'vi... 'team': '\\xe9\\x80\\xa3\\xe5\\x8b\\x9d\\xe6\\x96\\x87'}>"
p137
ssg70
I101
sg71
(dp138
I96
S'                were_here_count += page.were_here_count'
p139
sI97
S'                talking_about_count += page.talking_about_count'
p140
sI98
S''
sI99
S'            # check it team_counts has data in the same date, if YES, update the record, if NOT, then insert the new records.'
p141
sI100
S''
sI101
S'            row = fbpl( ((fbpl.team_counts.team == candidate)  & ( fbpl.post.date_time == date_time ) )  ).select()'
p142
sI102
S'            if row:'
p143
sI103
S'                row.update_record(checkins=checkins, likes=likes, were_here_count=were_here_count, talking_about_count=talking_about_count, total_active_posts=total_active_posts, total_post_likes=total_post_likes, total_post_comments=total_post_comments ,total_post_shares=total_post_shares, hour48_post_likes=hour48_post_likes, hour48_post_comments=hour48_post_comments, hour48_post_shares=hour48_post_shares, hour48_active_posts = hour48_active_posts, hour48_active_links =hour48_active_links, hour48_link_likes = hour48_link_likes, hour48_link_comments = hour48_link_comments, hour48_link_shares = hour48_link_shares, hour48_active_videos = hour48_active_videos, hour48_video_likes = hour48_video_likes, hour48_video_comments = hour48_video_comments, hour48_video_shares = hour48_video_shares, hour48_active_stories = hour48_active_stories, hour48_story_likes = hour48_story_likes, hour48_story_comments = hour48_story_comments, hour48_story_shares = hour48_story_shares)'
p144
sI104
S'            else:'
p145
sI105
S'                fbpl.team_counts.insert( team= candidate, date_time = date_time, checkins=checkins, likes=likes, were_here_count=were_here_count, talking_about_count=talking_about_count, total_active_posts=total_active_posts, total_post_likes=total_post_likes, total_post_comments=total_post_comments ,total_post_shares=total_post_shares, hour48_post_likes=hour48_post_likes, hour48_post_comments=hour48_post_comments, hour48_post_shares=hour48_post_shares, hour48_active_posts = hour48_active_posts, hour48_active_links =hour48_active_links, hour48_link_likes = hour48_link_likes, hour48_link_comments = hour48_link_comments, hour48_link_shares = hour48_link_shares, hour48_active_videos = hour48_active_videos, hour48_video_likes = hour48_video_likes, hour48_video_comments = hour48_video_comments, hour48_video_shares = hour48_video_shares, hour48_active_stories = hour48_active_stories, hour48_story_likes = hour48_story_likes, hour48_story_comments = hour48_story_comments, hour48_story_shares = hour48_story_shares)'
p146
ssg83
S'()'
p147
sg85
S'teamCount'
p148
sa(dp149
g62
S'/Applications/web2py.app/Contents/Resources/gluon/dal.py'
p150
sg64
(dp151
S'builtinstr'
p152
S"<type 'str'>"
p153
sS'self'
p154
S'<Table post (id,fid,message,from_id,from_name,cr...lastupdate,team,placeid,placename,fscore,tscore)>'
p155
sS'global ogetattr'
p156
S"<slot wrapper '__getattribute__' of 'object' objects>"
p157
sS'key'
p158
S"'date_time'"
p159
ssg70
I8817
sg71
(dp160
I8812
S'            query = self._build_query(key)'
p161
sI8813
S'            return self._db(query).select(limitby=(0,1), orderby_on_limitby=False).first()'
p162
sI8814
S"        elif str(key).isdigit() or 'google' in DRIVERS and isinstance(key, Key):"
p163
sI8815
S'            return self._db(self._id == key).select(limitby=(0,1), orderby_on_limitby=False).first()'
p164
sI8816
S'        elif key:'
p165
sI8817
S'            return ogetattr(self, str(key))'
p166
sI8818
S''
sI8819
S'    def __call__(self, key=DEFAULT, **kwargs):'
p167
sI8820
S"        for_update = kwargs.get('_for_update',False)"
p168
sI8821
S"        if '_for_update' in kwargs: del kwargs['_for_update']"
p169
ssg83
S"(self=<Table post (id,fid,message,from_id,from_name,cr...lastupdate,team,placeid,placename,fscore,tscore)>, key='date_time')"
p170
sg85
g20
sasS'pyver'
p171
S'Python 2.7.5: /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python (prefix: /Library/Frameworks/Python.framework/Versions/2.7)'
p172
sS'session'
p173
g57
(S's\x9f\x0c\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">auth</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">expiration</td><td style="vertical-align:top;">:</td><td><div>3600</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">hmac_key</td><td style="vertical-align:top;">:</td><td><div>979dfd76-228e-4c0f-b417-04deab8d2c48</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_visit</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2014, 4, 28, 15, 47, 59, 427132)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remember</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">first_name</td><td style="vertical-align:top;">:</td><td><div>Chih-Yuan</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">id</td><td style="vertical-align:top;">:</td><td><div>1L</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_name</td><td style="vertical-align:top;">:</td><td><div>Chen</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_id</td><td style="vertical-align:top;">:</td><td><div>614901526</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_key</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">username</td><td style="vertical-align:top;">:</td><td><div>614901526</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user_groups</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">1</td><td style="vertical-align:top;">:</td><td><div>user_1</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_orderby</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_query</td><td style="vertical-align:top;">:</td><td><div>fbpl.team_counts.id&gt;0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">redirect_uri</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8088/fbmayor/default/user/login</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">token</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">access_token</td><td style="vertical-align:top;">:</td><td><div>CAADSl0gHeTUBADgxLlDmh6WEJKzElZBpOduhsQsU02fAk35JGtSJFarvXZBgw65MIhhyvomRxmUn4vA2Pk2LcwbaT0CSTWTgCc0tTs4tlqPRSwREvR6V5gr7KsTUpMg2PJwlcKBBPdtiiiNNZARpi4cLFDhONiRtksMOr2G5HZA8K3xs7U7FGjBUtQLF5JAZD</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div>1403803036.508825</div></td></tr></table></div></td></tr></table></div>'
tRp174
sS'etype'
p175
S"<type 'exceptions.AttributeError'>"
p176
sS'date'
p177
S'Mon Apr 28 15:51:10 2014'
p178
sS'response'
p179
g57
(S's4&\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x10d6b7c00&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_fbmayor</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bde27a7a-47d4-49f2-86c1-7e875b82d88f<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>Logged in</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="brand" data-w2p_disable_with="default" href="http://www.web2py.com/"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>POI</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/display_form</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Add POI</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/addplace</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>People</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/display_people</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Add People</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/addpeople</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Page</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/display_page</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Page Count</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/index</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Add Page</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/addpage</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Update Pages</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/graphAPI/countAllPageSocialCount</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Post</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/display_post</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Add Post</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/addpost</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Get Post</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/graphAPI/collect_posts</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Update Posts</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/graphAPI/countAllPostSocialCount</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Event</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/display_event</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Add Event</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/fbmayor/default/addevent</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^graphAPI/\\w+\\.py$</div></td></tr><tr><td><div>^graphAPI/teamCount/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_fbmayor</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;/Applications/web2py.app/Contents/Resources/applications/fbmayor/sessions/127.0.0.1-bde27a7a-47d4-49f2-86c1-7e875b82d88f&#x27;, mode &#x27;rb+&#x27; at 0x10dae79c0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/Applications/web2py.app/Contents/Resources/applications/fbmayor/sessions/127.0.0.1-bde27a7a-47d4-49f2-86c1-7e875b82d88f</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>bedf11b7264390ff90ee550c8157af67</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-bde27a7a-47d4-49f2-86c1-7e875b82d88f</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_fbmayor</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>fbmayor</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div>customize me!</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Fbmayor</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>graphAPI/teamCount.html</div></td></tr></table></div>'
tRp180
sS'locals'
p181
(dp182
S'self'
p183
S'<Table post (id,fid,message,from_id,from_name,cr...lastupdate,team,placeid,placename,fscore,tscore)>'
p184
sS'key'
p185
S"'date_time'"
p186
sssS'traceback'
p187
S'Traceback (most recent call last):\n  File "/Applications/web2py.app/Contents/Resources/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/Applications/web2py.app/Contents/Resources/applications/fbmayor/controllers/graphAPI.py", line 1021, in <module>\n  File "/Applications/web2py.app/Contents/Resources/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/Applications/web2py.app/Contents/Resources/applications/fbmayor/controllers/graphAPI.py", line 101, in teamCount\n    row = fbpl( ((fbpl.team_counts.team == candidate)  & ( fbpl.post.date_time == date_time ) )  ).select()\n  File "/Applications/web2py.app/Contents/Resources/gluon/dal.py", line 8817, in __getitem__\n    return ogetattr(self, str(key))\nAttributeError: \'Table\' object has no attribute \'date_time\'\n'
p188
s.